// <auto-generated />
using System;
using KindyCity.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KindyCity.Infrastructure.Migrations
{
    [DbContext(typeof(KindyCityContext))]
    [Migration("20241231083748_initial-version-1")]
    partial class initialversion1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KindyCity.Domain.Entites.DistrictCategory", b =>
                {
                    b.Property<Guid>("DistrictCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DistrictCategoryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("DistrictCategories");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("LastSignInTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EmployeeEducation", b =>
                {
                    b.Property<Guid>("EmployeeEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Del")
                        .HasColumnType("bit");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeEducationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EmployeeInfo", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CitizenIDIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIDIssuedPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CurrentAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmergencyContactPersonName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmergencyContactPersonPhone")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmergencyContactRelationship")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("EthnicityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Facebook")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("IsVietnamese")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MaritalStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("Nationlity")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("PassportIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PassportIssuedEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportIssuedPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PlaceOfOrigin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("ResidenceDistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidenceProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidenceStreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidenceWardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Sex")
                        .HasColumnType("tinyint");

                    b.Property<string>("Skype")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte>("WorkingStatus")
                        .HasColumnType("tinyint");

                    b.HasKey("EmployeeId");

                    b.ToTable("EmployeeInfos");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EthnicityCategory", b =>
                {
                    b.Property<Guid>("EthnicityCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EthnicityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("EthnicityCategoryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EthnicityCategories");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.ProvinceCategory", b =>
                {
                    b.Property<Guid>("ProvinceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProvinceCategoryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("ProvinceCategories");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.StreetCategory", b =>
                {
                    b.Property<Guid>("StreetCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StreetCategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("StreetCategoryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("StressCategories");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.WardCategory", b =>
                {
                    b.Property<Guid>("WardCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WardCategoryId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("WardCategories");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.DistrictCategory", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeInfo")
                        .WithOne("DistrictCategories")
                        .HasForeignKey("KindyCity.Domain.Entites.DistrictCategory", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EmployeeEducation", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EmployeeInfo", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.Employee", "Employee")
                        .WithOne("EmployeeInfo")
                        .HasForeignKey("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EthnicityCategory", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeInfo")
                        .WithOne("EthnicityCategories")
                        .HasForeignKey("KindyCity.Domain.Entites.EthnicityCategory", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.ProvinceCategory", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeInfo")
                        .WithOne("ProvinceCategories")
                        .HasForeignKey("KindyCity.Domain.Entites.ProvinceCategory", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.StreetCategory", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeInfo")
                        .WithOne("StreetCategories")
                        .HasForeignKey("KindyCity.Domain.Entites.StreetCategory", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.WardCategory", b =>
                {
                    b.HasOne("KindyCity.Domain.Entites.EmployeeInfo", "EmployeeInfo")
                        .WithOne("WardCategories")
                        .HasForeignKey("KindyCity.Domain.Entites.WardCategory", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.Employee", b =>
                {
                    b.Navigation("EmployeeInfo");
                });

            modelBuilder.Entity("KindyCity.Domain.Entites.EmployeeInfo", b =>
                {
                    b.Navigation("DistrictCategories");

                    b.Navigation("EthnicityCategories");

                    b.Navigation("ProvinceCategories");

                    b.Navigation("StreetCategories");

                    b.Navigation("WardCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
